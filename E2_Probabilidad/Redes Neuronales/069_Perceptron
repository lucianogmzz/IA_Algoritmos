# Luciano Alejandro Gómez Muñoz 22310214 6E2

# Este código implementa un Perceptrón simple.

import numpy as np

# Definir la clase Perceptrón
class Perceptron:
    def __init__(self, input_size, learning_rate=0.1):
        self.weights = np.zeros(input_size)
        self.bias = 0.0
        self.learning_rate = learning_rate

    def activate(self, inputs):
        weighted_sum = np.dot(inputs, self.weights) + self.bias
        return 1 if weighted_sum >= 0 else 0

    def train(self, training_inputs, labels, epochs):
        for _ in range(epochs):
            for inputs, label in zip(training_inputs, labels):
                prediction = self.activate(inputs)
                self.weights += self.learning_rate * (label - prediction) * inputs
                self.bias += self.learning_rate * (label - prediction)

# Ejemplo de uso
training_inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
labels = np.array([0, 0, 0, 1])  # AND lógico

perceptron = Perceptron(input_size=2, learning_rate=0.1)
perceptron.train(training_inputs, labels, epochs=10)

# Prueba del perceptrón
test_inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
print("Salidas del perceptrón:", [perceptron.activate(inputs) for inputs in test_inputs])
