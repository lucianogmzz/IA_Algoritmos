# Luciano Alejandro Gómez Muñoz 22310214 6E2

# Este código implementa un filtro de Kalman para estimar la posición y velocidad de un objeto en 1D.
# También aplica un suavizado de Rauch-Tung-Striebel (RTS) para refinar las estimaciones pasadas
# basándose en la información futura. Se simulan mediciones ruidosas para ilustrar el proceso.

import numpy as np
import matplotlib.pyplot as plt

# Definir el modelo de espacio de estado
F = np.array([[1, 1], [0, 1]])           # Matriz de transición (modelo de movimiento constante)
H = np.array([[1, 0]])                   # Matriz de observación (solo medimos posición)
Q = np.array([[0.1, 0], [0, 0.1]])       # Covarianza del ruido del proceso (incertidumbre en el modelo)
R = np.array([[1]])                      # Covarianza del ruido de medición

# Estado inicial: posición = 0, velocidad = 1
x = np.array([0, 1]).reshape(-1, 1)      # Vector columna para el estado
P = np.eye(2)                            # Covarianza inicial (identidad)

n_steps = 50  # Número de pasos de simulación

# Listas para almacenar resultados
states = []         # Estados filtrados (estimados)
measurements = []   # Mediciones simuladas
predictions = []    # Predicciones antes de la medición
P_list = []         # Matrices de covarianza de estado (para suavizado posterior)

# Filtro de Kalman (predicción y actualización)
for _ in range(n_steps):
    # Predicción del siguiente estado
    x_pred = F @ x
    P_pred = F @ P @ F.T + Q
    predictions.append(x_pred.copy())

    # Generar una medición simulada con ruido
    z = H @ x_pred + np.random.normal(0, np.sqrt(R[0, 0]), size=(1, 1))
    measurements.append(z.item())

    # Actualización (filtrado)
    y = z - H @ x_pred                  # Residuo de la medición
    S = H @ P_pred @ H.T + R           # Covarianza del residuo
    K = P_pred @ H.T @ np.linalg.inv(S)  # Ganancia de Kalman
    x = x_pred + K @ y                 # Corrección del estado
    P = (np.eye(2) - K @ H) @ P_pred   # Corrección de la covarianza

    states.append(x.copy())
    P_list.append(P.copy())

# Añadir el estado inicial al principio de las listas
states = [np.array([[0], [1]])] + states
predictions = [np.array([[0], [1]])] + predictions
P_list = [np.eye(2)] + P_list

# Suavizado RTS: mejora de estimaciones pasadas usando estados futuros
smoothed_states = states.copy()
for t in reversed(range(n_steps)):
    P_curr = P_list[t]
    P_next = P_list[t+1]
    x_curr = states[t]
    x_next_smooth = smoothed_states[t+1]

    # Ganancia de suavizado
    C = P_curr @ F.T @ np.linalg.inv(F @ P_curr @ F.T + Q)

    # Corrección del estado usando la estimación futura
    smoothed_states[t] = x_curr + C @ (x_next_smooth - F @ x_curr)

# Convertir listas a arrays para graficar
states = np.hstack(states)
predictions = np.hstack(predictions)
smoothed_states = np.hstack(smoothed_states)
measurements = np.array(measurements)

# Graficar los resultados
plt.figure(figsize=(12, 6))
plt.plot(states[0], label='Estado Filtrado (Posición)', marker='o')
plt.plot(measurements, label='Mediciones', linestyle='None', marker='x', color='red')
plt.plot(predictions[0], label='Predicciones', linestyle='--', marker='s', color='green')
plt.plot(smoothed_states[0], label='Estado Suavizado', linestyle='-.', marker='d', color='purple')

plt.title('Filtrado, Predicción y Suavizado')
plt.xlabel('Paso de tiempo')
plt.ylabel('Posición')
plt.legend()
plt.grid(True)
plt.show()
