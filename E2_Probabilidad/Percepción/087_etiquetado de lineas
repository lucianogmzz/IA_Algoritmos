import cv2
import matplotlib.pyplot as plt
from skimage import data
from skimage import img_as_ubyte
import numpy as np

# Cargar imagen integrada y convertirla a formato compatible con OpenCV
image = img_as_ubyte(data.coins())  # Imagen en escala de grises

# Si necesitas una imagen en color:
# from skimage.color import gray2rgb
# image = img_as_ubyte(gray2rgb(data.coins()))

# Aplicar un filtro Gaussiano
blurred_image = cv2.GaussianBlur(image, (5, 5), 0)

# Detectar bordes con Canny
edges = cv2.Canny(blurred_image, 50, 150)

# Encontrar contornos
contours, _ = cv2.findContours(edges, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

# Convertir imagen a RGB para mostrar los contornos en color
output_image = cv2.cvtColor(image, cv2.COLOR_GRAY2RGB)
cv2.drawContours(output_image, contours, -1, (0, 255, 0), 1)

# Mostrar im√°genes
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.title('Imagen Original')
plt.imshow(image, cmap='gray')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.title('Contornos Detectados')
plt.imshow(output_image)
plt.axis('off')

plt.tight_layout()
plt.show()

