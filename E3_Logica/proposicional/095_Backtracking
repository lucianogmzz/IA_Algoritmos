# Luciano Alejandro Gómez Muñoz 22310214 6E2

# Este código implementa el algoritmo de backtracking para resolver un problema simple.

def is_safe(board, row, col, n):
    # Verificar si hay una reina en la misma columna
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Verificar si hay una reina en la diagonal superior izquierda
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Verificar si hay una reina en la diagonal superior derecha
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens(board, row, n):
    if row >= n:
        return True

    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1
            if solve_n_queens(board, row + 1, n):
                return True
            board[row][col] = 0

    return False

def print_board(board):
    for row in board:
        print(" ".join("Q" if x == 1 else "." for x in row))

# Resolver el problema de las N reinas
n = 4
board = [[0] * n for _ in range(n)]

if solve_n_queens(board, 0, n):
    print("Solución encontrada:")
    print_board(board)
else:
    print("No se encontró solución.")
