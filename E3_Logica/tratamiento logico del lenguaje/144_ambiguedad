# Resumen:
# Este código muestra cómo se puede generar y analizar una gramática ambigua
# utilizando Lark, un analizador sintáctico en Python. La gramática definida
# permite operaciones matemáticas con suma y multiplicación, y la ambigüedad
# se muestra cuando se analiza una expresión como "2 + 3 * 4".

from lark import Lark

# Definimos una gramática ambigua
gramatica = """
    start: expr
    expr: expr "+" expr
        | expr "*" expr
        | NUMBER
    %import common.NUMBER
    %import common.WS
    %ignore WS
"""

# Creamos el analizador con el parser Earley y opción de ambigüedad
analizador = Lark(gramatica, parser='earley', ambiguity='explicit')

# Analizamos una expresión ambigua
arbol = analizador.parse("2 + 3 * 4")

# Imprimimos el árbol de análisis para ver las diferentes interpretaciones
print(arbol.pretty())
