# Luciano Alejandro Gómez Muñoz 22310214 6E2
# Encadenamiento hacia delante con la biblioteca experta

from experta import *

# Definir los hechos
class Padre(Fact):
    """Relación de padre"""
    pass

class Madre(Fact):
    """Relación de madre"""
    pass

class Hermano(Fact):
    """Relación de hermanos"""
    pass

# Motor de inferencia
class MotorHermandad(KnowledgeEngine):
    
    @Rule(Padre(padre=MATCH.p, hijo=MATCH.h1),
          Padre(padre=MATCH.p, hijo=MATCH.h2),
          Madre(madre=MATCH.m, hijo=MATCH.h1),
          Madre(madre=MATCH.m, hijo=MATCH.h2),
          TEST(lambda h1, h2: h1 != h2))
    def determinar_hermanos(self, h1, h2):
        self.declare(Hermano(persona1=h1, persona2=h2))
    
    @Rule(Hermano(persona1=MATCH.x, persona2=MATCH.y))
    def mostrar_hermanos(self, x, y):
        print(f"{x} y {y} son hermanos.")

# Crear una instancia del motor
motor = MotorHermandad()

# Insertar hechos
motor.reset()
motor.declare(Padre(padre="Juan", hijo="Maria"))
motor.declare(Padre(padre="Juan", hijo="Pedro"))
motor.declare(Madre(madre="Ana", hijo="Maria"))
motor.declare(Madre(madre="Ana", hijo="Pedro"))

# Ejecutar encadenamiento hacia delante
motor.run()
